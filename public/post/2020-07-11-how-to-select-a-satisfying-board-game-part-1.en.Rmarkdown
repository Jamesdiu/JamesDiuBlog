---
title: 'How to select a satisfying board game? - Part 1'
author: James Diu
date: '2020-07-11'
slug: how-to-select-a-satisfying-board-game-part-1
categories:
  - boardgame
  - R
tags:
  - case study
backtotop: no
toc: no
---

<!-- # Title -->

<!-- toc -->

<!-- ## Contents -->


Being a board game enthusiast, I always introduce board games to my friends. Some of them might be another enthusiast, while some might have an idea that the board game is equivalent to chess. Most of the time I use my instinct and my understanding of the taste of my friends to decide which game would provide the greatest fun for us. However, it can be very biased due to my personal preference. On the other hand, I love to collect *different* board games. I hope my collection can be diverse enough to serve all kinds of my friends' backgrounds and preferences. So how should I choose a game to meet general preference? And which game should I select, such that it will enrich my collection and make sure it could be fun? (It is quite upset when you find out a new game is boring...) Learning more about the general preference statistically would be a nice solution.

##ยง Data description
Regarding the data of board games, [BoardGameGeek(BGG)](https://boardgamegeek.com/) is undoubtedly the biggest source. However, I am not going to pull the data directly. Instead, I will use the data from an interesting [post](https://dvatvani.github.io/BGG-Analysis-Part-1.html) about the trend and rating bias on BGG in 2018, which also come from BGG. Although it is not up-to-date data, I think it can still give us some insights and suggestions.
```{r, include=FALSE}
library(data.table)
library(tidyverse)
library(stringr)
library(corrplot)
library(gridExtra)
library(splitstackshape)
library(treemap)
library(entropy)
library(tidyselect)
```
```{r read_data, message=FALSE}
games_Jan2018 <- read_csv("data/games_Jan2018.csv")
df <- games_Jan2018
```
```{r data_cleaning, include=FALSE}
# These columns should have missing value instead of 0, replace with NA
list <- c("minplayers", "maxplayers", "playingtime","minplaytime", "maxplaytime")
df[list][df[list]==0]<-NA

# assign expansion as 1, boardgame as 0
df<- df %>% mutate(type = ifelse(type == "boardgame", 0, 1)) 

# Some error with the min & max players, and also min and max playing time
# df %>% filter(minplayers > maxplayers)

# Update data by visiting BGG for accurate information
df[df$id==234768,]$minplayers <- 2

df[df$id==235285,]$minplayers <- 2
df[df$id==235285,]$maxplayers <- 6

df[df$id==75294,]$minplayers <- 2
df[df$id==75294,]$maxplayers <- 20

# Since playing time is equal to maxplaytime, I switch the value for those minplaytime > maxplaytime 
df <- df %>% mutate(maxplaytime = ifelse(maxplaytime<minplaytime, minplaytime, maxplaytime),
                    minplaytime = ifelse(minplaytime<playingtime, minplaytime, playingtime))
```

In this dataset, we have total 95,777 board games, including the base games(80,105) and its expansion(15,672). The information can also be separated into 2 groups: games features and responses on BGG. After removing some duplicated or reduntant information, below are the useful columns: 

Features: `type`, `yearpublished`, `minplayers`, `maxplayers`, `minplaytime`, `maxplaytime`, `minage`, `types`, `categories`, `mechanics`, `desginers` 

Responses: `users_rated`, `bayes_average_rating`, `average_weight`

One of the most important data is `bayes_average_rating`, which is only available for the games with at least 30 users' ratings. It is used instead of the average player rating, which you normally see on the BGG when you search for any games, in order to exclude those games with biased rating due to small sample size. After filtering out those data less than 30 ratings, we still have 15,026 games and 4,714 expansion and we will place our focus on them. Apart from `bayes_average_rating`, it is necessary to define `average_weight`. From BGG, there is no explicit defination for weight. From my observation, I would assume `average_weight` as the complexity of a game. Although it is a subjective index given by the users and it is hard to obtain this data for those new games, I think this information would be still useful for us to determine if a complex game is more popular.
```{r}
df %>% filter(users_rated>=30) %>% group_by(type) %>% summarise(n=n())
df <- df %>% filter(users_rated>=30)
```

Now we have a rough idea about what cards are on our hand. Let's find out more from them. In the beginning, we start with the numerical data.

### Correlation - The rating has positive correlation with weight & minimum age

Fig.1 is the correlation table among different numerical features. We can see the BGG rating is positivly correlated with the average weight and minimum age. Meanwhile, weight and age also show positive correlation so means they have some colinearity. Considering that Besides, the rating is somehow independent of the number of players and the duration of playing time, but both features show some dependence on both features. Therefore we will go through all these features one by one.
```{r, echo=FALSE}
corrplot(cor(
  df %>% select(BGG_rating = bayes_average_rating,
                avg_weight = average_weight,
                yearpublished, minage,
                minplayers, maxplayers, minplaytime, maxplaytime),
  use = "pairwise.complete.obs" # igrone missing pairs of data
  ),
  method = "circle", type ="lower", tl.cex = 1, tl.srt = 0.1,
  title = "Fig.1: Correlation between numerical data",
  mar=c(0,0,2,0))
  
```

### Weight - Less complicated game is less popular
It obvious that the weight of games has positive skewness (fig. 2), with the mode at 2. Meanwhile, we should be reminded that this is a score provided by the users and it is a relative value to other games. 
```{r, echo=FALSE}
ggplot(df, aes(x=average_weight)) +
  geom_histogram(binwidth = 0.5) +
  scale_x_continuous(breaks = seq(0:5), name = "Average Weight") +
  scale_y_continuous(name="") +
  ggtitle("Fig.2: Histogram of average weight(complexity)")
```
From fig.3, we can see the rating moves slightly upwards when the complexity increase. One of the most interesting thing is no games with an average weight higher than 2 has a rating below 5, while all games rated above 8 also belong to this group.
```{r}
avg_BGG_rate <- mean(df$bayes_average_rating)
ggplot(df, aes(x=average_weight, y=bayes_average_rating)) +
  geom_bin2d(binwidth = 0.5) +
  scale_fill_continuous(type = "viridis") + 
  scale_x_continuous(name = "Average Weight") +
  scale_y_continuous(name = "BGG Rating") +
  theme_bw() +
  ggtitle("Fig.3: Distribution of weight against rating")
```

```{r}
df %>% filter(average_weight<3, bayes_average_rating>8)
```


### Year of publish
Since some of the games on our list do not have a clear publish date. Therefore we will start with the games published on or after 1985, which have already cover 90% of the games. For the rest of the data, I will set them to NA as irrelevant due to the small sample size.
```{r}
sort(df$yearpublished)[round(nrow(df)/10)]
```

From the below plot, the average BGG rating raises slightly over the years. However, it is hard to conclude whether the games published are getting better or the baseline of users rating is going upwards. One interesting thing to notice is the ratings of games are spreading further to the higher rating, and so does the best rating. This would be the result of the increase of games published.
```{r, echo=FALSE}
annual_rating <-
  ggplot(df %>% group_by(yearpublished) %>%
         filter(yearpublished >= 1985)) +
  geom_point(aes(x=yearpublished, y=bayes_average_rating, color = as.factor(yearpublished))) +
  geom_point(data = df %>% group_by(yearpublished) %>%
         filter(yearpublished >= 1985) %>% summarise(avg_BGG_rating = mean(bayes_average_rating)),
         aes(x = yearpublished, y=avg_BGG_rating), colour = "black") +
  theme(legend.position = "none") +
  scale_x_continuous(name = "")+
  scale_y_continuous(name = "")+
  ggtitle("BGG rating over publish year (user rated >= 30)")
  
annual_rating + 
  geom_hline(yintercept = avg_BGG_rate, alpha = 0.5, linetype = "dashed") +
  geom_text(aes(1985, avg_BGG_rate, 
                label = paste("avg_BGG_rating: ", round(avg_BGG_rate,1)), 
                vjust = -1, hjust = -0.01), size = 3)
```
```{r, echo=FALSE}
ggplot(df %>% filter(yearpublished >=1985) %>% group_by(yearpublished) %>% summarise(n=n())) +
  geom_point(aes(x=yearpublished, y=n, color = as.factor(yearpublished))) +
  theme(legend.position = "none") +
  scale_x_continuous(name = "")+
  scale_y_continuous(name = "")+
  ggtitle("Number of game published along year (user rated >=30)")
```
```{r, echo=FALSE}
corrplot.mixed(cor(df %>% filter(yearpublished >=1985) %>%
               group_by(yearpublished) %>% summarise(Nr_of_pub = n(),
                                                     avg_rating = mean(bayes_average_rating),
                                                     sd_rating = sd(bayes_average_rating)),
         use = "pairwise.complete.obs" # igrone missing pairs of data
  ),
  lower.col = "black", number.cex = .7)
```

### Minimum age

We can know that the minimum age is positively correlated to weight and rating from the correlation chart before. It is reasonable because most of the BGG users are not children and I have sure they are not that interested in those games for children. This fact also implies the evaluation of children's games may be invalid since the focus group is different. Besides, the minimum age mainly falls into 5 ages: 8,10,12-14 and the distribution is very inbalance. In general, the purpose of minimum age is an index for the complexity and content However, the judgment depends highly on the publisher (noted that games specially for 18+ are rare), therefore I would also prefer to transfer minimum age into 5 groups: <6, 6-8, 9-11, 12-14, 15+

```{r}
df <- df %>% mutate(age_group = ifelse(minage>14, "15+",
                                        ifelse(minage>11, "12-14",
                                               ifelse(minage>8, "9-11",
                                                      ifelse(minage>5, "6-8","<6")))),
                     age_group = factor(age_group, levels = c("<6", "6-8", "9-11","12-14","15+")))
```
```{r, echo=FALSE}
age_group <- df %>% group_by(age_group) %>% summarise(n=n())
ggplot(df)+
  geom_bar(aes(x=age_group, fill=age_group), stat = "count") +
    geom_text(data = age_group,
            aes(age_group, n+2, 
                label = paste(age_group,":", n), vjust=1.5), size = 4) +
    theme(
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    legend.position = "none") +
  scale_y_continuous(name="")+
  ggtitle("Histogram of minimum age group")
```

According to the plot, it is easy to see that <6 & 15+ has a lower rating than other. It reviews that the correlation between minimum age and rating may not be linear.

```{r, echo=FALSE}
age_rating <-
  ggplot(df, aes(x=age_group, y=bayes_average_rating, color = age_group)) +
  geom_point() +
  geom_jitter() +
  geom_point(data = df %>%
               group_by(age_group) %>%
               summarise(avg_BGG_rating = mean(bayes_average_rating)),
             aes(x = age_group, y=avg_BGG_rating), colour = "black") +
  theme(legend.position = "none") +
  scale_x_discrete(name = "")+
  scale_y_continuous(name = "")+
  ggtitle("BGG rating over minimum age group (user rated >= 30)")
  
age_rating + 
  geom_hline(yintercept = avg_BGG_rate, alpha = 0.5, linetype = "dashed") +
  geom_text(aes(0, avg_BGG_rate, 
                label = paste("avg_BGG_rating: ", round(avg_BGG_rate,1)), 
                vjust = -1, hjust = -0.01), size = 3, color="black")
```

### Number of players
Most of the games can afford 2-4 players without any surprise.
```{r, echo=FALSE, warning=FALSE}
ggplot(df %>% select(maxplayers, minplayers) %>%
  filter(!is.na(minplayers), !is.na(maxplayers)) %>%
         top_n(-n()*0.95, maxplayers) %>%
    group_by(minplayers, maxplayers) %>%
    summarise(n=n())) +
  geom_point(aes(x=maxplayers, y=minplayers, size = n,
                 color = ifelse(n>=4000, "4000+",
                                ifelse(n>=3000, "3000-3999",
                                       ifelse(n>=2000, "2000-2999", "<2000"))))) +
  scale_x_continuous(breaks = seq(1:10)) + 
  scale_y_continuous(breaks = seq(1:10)) +
  scale_color_brewer(palette="Dark2") + 
  guides(size = FALSE) +
  scale_color_discrete(name = "Count") +
  ggtitle("Distribution of players avaliable for 95% board games")
```

### Playing time
The playing time can be simplified into 4 groups:
-1. short: 30 min or less
-2. normal: 30 - 60 min
-3. long: 60 - 90 min
-4. extreme: 120 min or longer
From my experience, the playing time can be varied a lot and normally longer than its stated. However, it still provides a segment of time length for the games.
Similiarly to the minimum age, I would prefer to use the above groups as categorical value for the playing time instead of a numeric value.

```{r, echo=FALSE}
ggplot(df %>% select(maxplaytime, minplaytime) %>%
              filter(!is.na(maxplaytime), !is.na(minplaytime)) %>%
              top_n(-round(n()*0.9), maxplaytime),
       aes(x=maxplaytime, y=minplaytime) ) +
  geom_bin2d(binwidth = 10) +
  scale_fill_continuous(type = "viridis") + 
  scale_x_continuous(breaks = seq(0,200,10)) +
  scale_y_continuous(breaks = seq(0,200,10)) +
  theme_bw() +
  ggtitle("Distribution of play time duration for 90% of board games")
```

```{r, message=FALSE}
# Assign new group
df <- df %>% mutate(playingtime = ifelse(maxplaytime >= 120, "Extreme",
                                         ifelse(maxplaytime >=90, "Long",
                                                ifelse(maxplaytime >=60, "Normal",
                                                       ifelse(is.na(maxplaytime),NA,"Short")))),
                    playingtime = factor(playingtime, levels =c("Short","Normal","Long","Extreme")))
```
```{r, echo=FALSE, warning=FALSE}
time_count <- df %>% group_by(playingtime) %>% summarise(n=n())
ggplot(df) +
  geom_bar(aes(x=playingtime, fill=playingtime), stat = "count") +
  theme(legend.position = "none") +
  geom_text(data = time_count,
            aes(playingtime, n+2, 
                label = paste(playingtime,":", n), vjust=1.5), size = 4) +
  # theme_bw() +
  theme(
    # axis.line = element_line(colour = "black"),
    # panel.grid.major = element_blank(),
    # panel.grid.minor = element_blank(),
    # panel.border = element_blank(),
    # panel.background = element_blank(),
    axis.title = element_blank(),
    # axis.text.y = element_blank(),
    # axis.text.x = element_blank(),
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    legend.position = "none") +
  ggtitle("Histogram for playing time group")
```






